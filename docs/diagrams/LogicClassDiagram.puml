@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class BookingSystemParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class XYZPromptCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
Class CommandState
}

Interface Logic <<Interface>>
Class LogicManager
Class StatefulLogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
StatefulLogicManager --> "1" BookingSystemParser
LogicManager -->"1" BookingSystemParser
BookingSystemParser .left.> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..> XYZPromptCommand : creates >
XYZPromptCommand .down.> CommandState
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .right.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
XYZPromptCommand -right-|> Command
LogicManager .left.> Command : executes >

LogicManager --> Model
Command .right.> Model
note right of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc

Logic ..> CommandResult
LogicManager .down.> CommandResult
StatefulLogicManager -down-> CommandState
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
